# -*- coding: utf-8 -*-
"""Sales-prediction-dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eyElJsUZQR40xzyeYelAXtMOtfdfq3dd
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the dataset
sales_data = pd.read_excel("advertising_sales_data.xlsx", sheet_name="advertising_sales_data")

# Fill missing values in the 'Radio' column correctly to avoid FutureWarning
sales_data["Radio"] = sales_data["Radio"].fillna(sales_data["Radio"].median())

# Drop non-numeric columns (Campaign is just an identifier)
sales_data = sales_data.drop(columns=["Campaign"])

# Visualize the correlation matrix
plt.figure(figsize=(6, 4))
sns.heatmap(sales_data.corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix")
plt.show()

# Define features and target variable
X = sales_data[["TV", "Radio", "Newspaper"]]
y = sales_data["Sales"]

# Split data into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

# Print model performance
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Visualization: Actual vs Predicted Sales
plt.figure(figsize=(6, 4))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales")
plt.show()